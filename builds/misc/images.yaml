trigger:
  batch: true
  branches:
    include:
      - master
pr: none
jobs:
         
          
################################################################################
  - job: linux
################################################################################
    displayName: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      NetCorePackageUri: https://download.microsoft.com/download/4/0/9/40920432-3302-47a8-b13c-bbc4848ad114/dotnet-sdk-2.1.302-linux-x64.tar.gz
    steps:
      - script: scripts/linux/installPrereqs.sh -u $(NetCorePackageUri)
        name: install
        displayName: Install dependencies

      - bash: 'docker login $(registry.address) --username $(registry.user) --password $(registry.password)'
        displayName: 'Docker Login'

      - script: edgelet/build/linux/install.sh --package-arm
        displayName: Install Rust

      - bash: 'echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"'
        displayName: Modify path

      - bash: 'cargo install --git https://github.com/arsing/cross.git --branch set-path'
        displayName: 'Install cross (fork with docker fix)'

      - script: scripts/linux/buildBranch.sh -c Release --no-rocksdb-bin
        name: build
        displayName: Build (release)

      - script: scripts/linux/buildDiagnostics.sh
        displayName: Build iotedge-diagnostics

      - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.BinariesDirectory)/publish' --build-number $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          ArtifactName: 'core-linux'

      # azureiotedge-diagnostics
      - template: templates/image-linux.yaml
        parameters:
          name: azureiotedge-diagnostics
          imageName: azureiotedge-diagnostics
          project: azureiotedge-diagnostics

      # Edge Agent
      - template: templates/image-linux.yaml
        parameters:
          name: Edge Agent
          imageName: azureiotedge-agent
          project: Microsoft.Azure.Devices.Edge.Agent.Service

      # Edge Hub
      - template: templates/image-linux.yaml
        parameters:
          name: Edge Hub
          imageName: azureiotedge-hub
          project: Microsoft.Azure.Devices.Edge.Hub.Service

      # Simulated Temperature Sensor
      - template: templates/image-linux.yaml
        parameters:
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor

      # Temperature Filter
      - template: templates/image-linux.yaml
        parameters:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter

      # Load Gen
      - template: templates/image-linux.yaml
        parameters:
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen

      # Messages Analyzer
      - template: templates/image-linux.yaml
        parameters:
          name: Messages Analyzer
          imageName: azureiotedge-analyzer
          project: MessagesAnalyzer

################################################################################
  - job: manifest
################################################################################
    displayName: Manifest
    pool:
      vmImage: 'ubuntu-16.04'
    dependsOn:
      - linux
    variables:
      tags: "['latest']"
    steps:
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-agent/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Edge Agent Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-hub/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Edge Hub Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-modules/SimulatedTemperatureSensor/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Temperature Sensor Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edgelet/iotedge-diagnostics/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish azureiotedge-diagnostics Manifest'
